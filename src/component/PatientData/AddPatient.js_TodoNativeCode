import React from 'react';
import { KeyboardAvoidingView, View, StyleSheet, Image, TouchableOpacity, ListView } from 'react-native';
import {Text, Form, Item, List, Label, Input} from 'native-base'
import styles from '../styles/baseStyles.js';
import DatePicker from 'react-native-datepicker'
import ListItem from './ListItem'

export default class AddPatient extends React.Component {
    componentWillMount() {
        this.props.firebaseApp.auth().onAuthStateChanged(function(user){
            if (user) {
                console.log('user is signed in')
            } else {
                console.log('user is signed out')
            }
        });
        
        const userData = this.props.firebaseApp.auth().currentUser;
        this.setState({
            user: userData,
            loading: false
        });

        // let patientDataRef = this.props.firebaseApp.database().ref('patientData').orderByKey().limitToLast(100);
        // patientDataRef.on('child_added', snapshot => {
        //   /* Update React state when todo is added at Firebase Database */
        //   let patient = { text: snapshot.val(), id: snapshot.key };
        //   this.setState({ patientData: [patient].concat(this.state.patientName, this.state.patientDisease, this.state.patientMedications, this.state.dateOfArrival, this.state.cost, this.state.user.uid)});
        // })
    }

    constructor(props) {
        super(props);
        this.tasksRef = this.props.firebaseApp.database().ref();
        // Each list must has a dataSource, to set that data for it you must call: cloneWithRows()
        // Check out the docs on the React Native List View here:
        // https://facebook.github.io/react-native/docs/listview.html
        const dataSource = new ListView.DataSource({
          rowHasChanged: (row1, row2) => row1 !== row2,
        });
        this.state = {
          dataSource: dataSource, // dataSource for our list
          newTask: "",
          disease: "", // The name of the new task
        };
      }
    
    // addPatient(e){

    //     if (this.state.patientName === "") {
    //         return;
    //     }
    //     /* Send the todo to Firebase */
    //     this.props.firebaseApp.database().ref('patientData').push({ LoggedInKey:this.state.user.uid,PatientName: this.state.patientName, Disease: this.state.patientDisease, Medications: this.state.patientMedications, DateOfArrival: this.state.dateOfArrival, Cost: this.state.cost});

    //     this.setState({patientName: null});
    // }
    render() {
        this.state.user.email
        return(
            <View>
                <Image source={require('../../img/logo.png')} />
                <ListView
                dataSource={this.state.dataSource}
                enableEmptySections={true}
                renderRow={this._renderItem.bind(this)}
                style={styles.listView}/>
                 <Text>{this.state.user.email}</Text>
                    {/*<Item floatingLabel>
                        <Label>Patient Name</Label>
                        <Input
                        onChangeText={(text) => this.setState({patientName: text})} />
                    </Item>
                    <Item floatingLabel>
                        <Label>Disease</Label>
                        <Input
                        onChangeText={(text) => this.setState({patientDisease: text})} />
                    </Item>
                    <Item floatingLabel>
                        <Label>Medications</Label>
                        <Input
                        onChangeText={(text) => this.setState({patientMedications: text})} />
                    </Item>
                    <DatePicker
                    style={{width: 200}}
                    date={this.state.date}
                    mode="datetime"
                    format="YYYY-MM-DD"
                    minDate="2017-01-01"
                    maxDate="2022-06-01"
                    confirmBtnText="Confirm"
                    cancelBtnText="Cancel"
                    timeZoneOffsetInMinutes={this.state.timeZoneOffsetInHours * 60}
                    customStyles={{
                    dateIcon: {
                        position: 'absolute',
                        left: 0,
                        top: 4,
                        marginLeft: 0
                    },
                    dateInput: {
                        marginLeft: 36
                    }
                    // ... You can check the source to find the other keys.
                    }}
                    onDateChange={(date) => this.setState({dateOfArrival: date})}
                    /> */}
                    <Item floatingLabel>
                        <Label>Cost</Label>
                        <Input
                        value={this.state.newTask}
                        style={styles.textEdit}
                        onChangeText={(text) => this.setState({newTask: text})}/>
                    </Item>
                    <Item floatingLabel>
                        <Label>Disease</Label>
                        <Input
                        value={this.state.disease}
                        style={styles.textEdit}
                        onChangeText={(text) => this.setState({disease: text})}/>
                    </Item>
                    <TouchableOpacity onPress={this._addTask.bind(this)}><Text>Add</Text></TouchableOpacity>
                    
            </View>
        )
    }

    _renderItem(task, disease) {
        // a method for building each list item
        const onTaskCompletion = () => {
          // removes the item from the list
          this.tasksRef.child(task._key).remove()
          this.tasksRef.child(disease._key).remove()
        };
        return (
          <ListItem task={task} disease={disease} />
        );
      } 
      
      _addTask() {
        if (this.state.newTask === "") {
          return;
        }
        this.tasksRef.push({ name: this.state.newTask, disease: this.state.disease});
        this.setState({newTask: "", disease: ""});
      }

    listenForTasks(tasksRef) {
        // listen for changes to the tasks reference, when it updates we'll get a
        // dataSnapshot from firebase
        tasksRef.on('value', (dataSnapshot) => {
          // transform the children to an array
          var tasks = [];
          dataSnapshot.forEach((child) => {
            tasks.push({
              name: child.val().name,
              disease: child.val().disease,
              _key: child.key
            });
          });
    
          // Update the state with the new tasks
          this.setState({
            dataSource: this.state.dataSource.cloneWithRows(tasks)
          });
        });
    }
    
    componentDidMount() {
        const user = this.props.firebaseApp.auth().currentUser;
        this.listenForTasks(this.tasksRef);
    }
}
